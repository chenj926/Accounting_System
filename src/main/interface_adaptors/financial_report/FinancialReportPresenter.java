package interface_adaptors.financial_report;

import interface_adaptors.ViewManagerModel;
import use_case.financial_report.FinancialReportOutputData;

/**
 * The {@code FinancialReportPresenter} class is an abstract presenter in the Clean Architecture, responsible
 * for preparing the view model and coordinating the display of financial report data. It manages both
 * successful and failed report generation outcomes, ensuring that the view is updated accordingly.
 * <p>
 * This class is parameterized to allow flexibility in the specific types used for the view model,
 * state, and output data. It plays a crucial role in transforming the output data from the use case
 * interactor into a format suitable for presentation in the view.
 * </p>
 *
 * <p><b>Authors:</b> Eric Chen, Dana Hunag</p>
 *
 * @param <V> the type of the view model that represents the data needed by the view
 * @param <S> the type of the state that represents the current state of the financial report
 * @param <O> the type of the output data generated by the use case interactor
 */
public abstract class FinancialReportPresenter<
        V extends FinancialReportViewModel<S>,
        S extends FinancialReportState,
        O extends FinancialReportOutputData> {
    protected V viewModel;
    protected final ViewManagerModel viewManager;

    protected String reportContent;

    /**
     * Constructs a {@code FinancialReportPresenter} with the specified view model and view manager.
     * <p>
     * This constructor initializes the presenter with the necessary components to manage the presentation
     * logic for financial reports.
     * </p>
     *
     * @param viewModel  the view model that holds the data to be displayed in the view
     * @param viewManager the view manager responsible for handling view transitions
     */
    public FinancialReportPresenter(V viewModel, ViewManagerModel viewManager) {
        this.viewModel = viewModel;
        this.viewManager = viewManager;
    }

    /**
     * Prepares the success view by storing the financial report content and updating the state.
     * <p>
     * This method is called when the financial report is successfully generated. It stores the report
     * content and prepares the state for presentation.
     * </p>
     *
     * @param outputData the output data containing the report content
     */
    public void prepareSuccessView(O outputData) {
        this.reportContent = outputData.getReportContent();
        S state = (S) viewModel.getState();
    }

    /**
     * Prepares the failure view by setting the error message in the state and updating the view model.
     * <p>
     * This method is called when there is an error in generating the financial report. It updates the
     * state with the error message and ensures that the view reflects the failure.
     * </p>
     *
     * @param error the error message to be displayed in the view
     */
    public void prepareFailView(String error){
    S state = (S) viewModel.getState();
    state.setReportContent(error);
    state.setNoTransaction(error);
    viewModel.setState(state);
    viewModel.setReportContent(state.getReportContent());
    viewModel.firePropertyChange();

    viewManager.setActiveViewName(viewModel.getViewName());
    }
}

